import { faPlay, faPause, faRedo } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import HomeBox from "~/components/homeTaskBoxes";
import Input from "~/components/input";
import { config } from "@fortawesome/fontawesome-svg-core";
import "@fortawesome/fontawesome-svg-core/styles.css";
import { useSession } from "next-auth/react";
import CreateTask from "~/components/createTask";
import { Card } from "@nextui-org/react";
import Timer from "~/components/timer";
config.autoAddCss = false;

const POMODORO_TIME = 25 * 60;
const SHORT_BREAK = 5 * 60;
const LONG_BREAK = 15 * 60;

const Home: NextPage = () => {
  const [timeLeft, setTimeLeft] = useState(POMODORO_TIME);
  const [isEnabled, setIsEnabled] = useState(false);
  const [cycles, setCycles] = useState(0);
  const [isPomodoroMode, setIsPomodoroMode] = useState(true);
  const [customTime, setCustomTime] = useState(0);
  const { data: session, status } = useSession();

  const startTimer = () => {
    setIsEnabled(true);
  };

  const pauseTimer = () => {
    setIsEnabled(false);
  };

  const resetTimer = () => {
    setIsEnabled(false);
    if (isPomodoroMode == false) {
      setTimeLeft(customTime);
    } else {
      setTimeLeft(POMODORO_TIME);
    }
  };
  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;

    return `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(
      2,
      "0"
    )}`;
  };

  useEffect(() => {
    let interval: NodeJS.Timeout | undefined;

    if (isEnabled && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(timeLeft - 1);
      }, 1000);
    } else if (isEnabled && timeLeft <= 0) {
      clearInterval(interval);
      if (isPomodoroMode) {
        if (cycles < 3) {
          setTimeLeft(SHORT_BREAK);
          setCycles(cycles + 1);
        } else {
          setTimeLeft(LONG_BREAK);
          setCycles(0);
        }
      } else {
        setIsEnabled(false);
      }
    } else {
      clearInterval(interval);
      setIsEnabled(false);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isEnabled, timeLeft, isPomodoroMode, cycles]);
  const handlePomodoroChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setIsPomodoroMode(e.target.checked);
    if (e.target.checked) {
      setTimeLeft(POMODORO_TIME);
      setCycles(0);
    } else {
      setTimeLeft(customTime);
    }
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center gap-4 p-16">
        <button className="absolute left-[-32px] top-1/2 z-10 -translate-y-1/2 -rotate-90 transform rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-300">
          AI Chatbot
        </button>
        <Timer></Timer>
      </main>
    </>
  );
};

export default Home;
